import math
import torch
import torch.nn as nn
from torch_geometric.nn import GINEConv
from typing import Any, Dict, Optional

import torch.nn.functional as F
from torch import Tensor

from torch_geometric.nn.conv import MessagePassing
from torch_geometric.nn.inits import reset
from torch_geometric.nn.resolver import (
    activation_resolver,
    normalization_resolver,
)
from torch_geometric.typing import Adj
from torch_geometric.utils import to_dense_batch

from mamba_ssm import Mamba
from torch_geometric.utils import degree, sort_edge_index


### torch version too old for timm
### https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers
def drop_path(x, drop_prob: float = 0., training: bool = False, scale_by_keep: bool = True):
    """Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).
    This is the same as the DropConnect impl I created for EfficientNet, etc networks, however,
    the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...
    See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for
    changing the layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use
    'survival rate' as the argument.
    """
    if drop_prob == 0. or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = x.new_empty(shape).bernoulli_(keep_prob)
    if keep_prob > 0.0 and scale_by_keep:
        random_tensor.div_(keep_prob)
    return x * random_tensor


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).
    """

    def __init__(self, drop_prob=None, scale_by_keep=True):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob
        self.scale_by_keep = scale_by_keep

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training, self.scale_by_keep)


### torch version too old for timm
### https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers
def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def permute_within_batch(x, batch):
    # Enumerate over unique batch indices
    unique_batches = torch.unique(batch)

    # Initialize list to store permuted indices
    permuted_indices = []

    for batch_index in unique_batches:
        # Extract indices for the current batch
        indices_in_batch = (batch == batch_index).nonzero().squeeze()

        # Permute indices within the current batch
        permuted_indices_in_batch = indices_in_batch[torch.randperm(len(indices_in_batch))]

        # Append permuted indices to the list
        permuted_indices.append(permuted_indices_in_batch)

    # Concatenate permuted indices into a single tensor
    permuted_indices = torch.cat(permuted_indices)

    return permuted_indices

def import_class(name):
    components = name.split('.')
    mod = __import__(components[0])
    for comp in components[1:]:
        mod = getattr(mod, comp)
    return mod


def conv_branch_init(conv, branches):
    weight = conv.weight
    n = weight.size(0)
    k1 = weight.size(1)
    k2 = weight.size(2)
    nn.init.normal_(weight, 0, math.sqrt(2. / (n * k1 * k2 * branches)))
    if conv.bias is not None:
        nn.init.constant_(conv.bias, 0)


def conv_init(conv):
    if conv.weight is not None:
        nn.init.kaiming_normal_(conv.weight, mode='fan_out')
    if conv.bias is not None:
        nn.init.constant_(conv.bias, 0)


def bn_init(bn, scale):
    nn.init.constant_(bn.weight, scale)
    nn.init.constant_(bn.bias, 0)


def weights_init(m):
    classname = m.__class__.__name__
    if classname.find('Conv') != -1:
        if hasattr(m, 'weight'):
            nn.init.kaiming_normal_(m.weight, mode='fan_out')
        if hasattr(m, 'bias') and m.bias is not None and isinstance(m.bias, torch.Tensor):
            nn.init.constant_(m.bias, 0)
    elif classname.find('BatchNorm') != -1:
        if hasattr(m, 'weight') and m.weight is not None:
            m.weight.data.normal_(1.0, 0.02)
        if hasattr(m, 'bias') and m.bias is not None:
            m.bias.data.fill_(0)


class TemporalConv(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size, stride=1, dilation=1):
        super(TemporalConv, self).__init__()
        # adjust padding for kernel size so that it will be equal to out_channe;s
        pad = (kernel_size + (kernel_size - 1) * (dilation - 1) - 1) // 2
        self.conv = nn.Conv2d(
            in_channels,
            out_channels,
            # kernel_size, 1 so that we look only for spatial
            # 3 time steps windows of only 1 node
            kernel_size=(kernel_size, 1),
            padding=(pad, 0),
            stride=(stride, 1),
            dilation=(dilation, 1),
        )

        self.bn = nn.BatchNorm2d(out_channels)

    def forward(self, x):
        x = self.conv(x)
        x = self.bn(x)
        return x


class MultiScale_TemporalConv(nn.Module):
    def __init__(self,
                 in_channels,
                 out_channels,
                 kernel_size=3,
                 stride=1,
                 dilations=[1, 2, 3, 4],
                 residual=False,
                 residual_kernel_size=1):

        super().__init__()
        assert out_channels % (len(dilations) + 2) == 0, '# out channels should be multiples of # branches'

        # Multiple branches of temporal convolution
        # + 2 because we have additional 2 branches for max and 1x1 branch
        self.num_branches = len(dilations) + 2
        branch_channels = out_channels // self.num_branches
        if type(kernel_size) == list:
            assert len(kernel_size) == len(dilations)
        else:
            kernel_size = [kernel_size] * len(dilations)
        # Temporal Convolution branches
        self.branches = nn.ModuleList([
            nn.Sequential(
                nn.Conv2d(
                    in_channels,
                    branch_channels,
                    kernel_size=1,
                    padding=0
                ),
                nn.BatchNorm2d(branch_channels),
                nn.ReLU(inplace=True),
                TemporalConv(
                    branch_channels,
                    branch_channels,
                    kernel_size=ks,
                    stride=stride,
                    dilation=dilation
                ),
            )
            # checking for each dilation so that we will look for global context
            for ks, dilation in zip(kernel_size, dilations)
        ])

        # Additional Max & 1x1 branch
        self.branches.append(nn.Sequential(
            nn.Conv2d(in_channels, branch_channels, kernel_size=1, padding=0),
            nn.BatchNorm2d(branch_channels),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=(3, 1), stride=(stride, 1), padding=(1, 0)),
            nn.BatchNorm2d(branch_channels)  # 为什么还要加bn
        ))

        self.branches.append(nn.Sequential(
            nn.Conv2d(in_channels, branch_channels, kernel_size=1, padding=0, stride=(stride, 1)),
            nn.BatchNorm2d(branch_channels)
        ))

        # Residual connection
        if not residual:
            self.residual = lambda x: 0
        elif (in_channels == out_channels) and (stride == 1):
            self.residual = lambda x: x
        else:
            self.residual = TemporalConv(in_channels, out_channels, kernel_size=residual_kernel_size, stride=stride)
        # print(len(self.branches))
        # initialize
        self.apply(weights_init)

    def forward(self, x):
        # Input dim: (N,C,T,V)
        res = self.residual(x)
        branch_outs = []
        for tempconv in self.branches:
            out = tempconv(x)
            branch_outs.append(out)

        out = torch.cat(branch_outs, dim=1)
        out += res
        return out


class unit_tcn(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size=5, stride=1):
        super(unit_tcn, self).__init__()
        pad = int((kernel_size - 1) / 2)
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size=(kernel_size, 1), padding=(pad, 0),
                              stride=(stride, 1), groups=1)
        self.bn = nn.BatchNorm2d(out_channels)
        self.relu = nn.ReLU(inplace=True)
        conv_init(self.conv)
        bn_init(self.bn, 1)

    def forward(self, x):
        x = self.bn(self.conv(x))
        return x


class GPSConv(torch.nn.Module):

    def __init__(
            self,
            channels: int,
            conv: Optional[MessagePassing],
            dropout: float = 0.0,
            attn_dropout: float = 0.0,
            act: str = 'relu',
            order_by_degree: bool = False,
            shuffle_ind: int = 0,
            d_state: int = 16,
            d_conv: int = 4,
            act_kwargs: Optional[Dict[str, Any]] = None,
            norm: Optional[str] = 'batch_norm',
            norm_kwargs: Optional[Dict[str, Any]] = None,
    ):
        super().__init__()

        self.channels = channels
        self.conv = conv
        self.dropout = dropout
        self.shuffle_ind = shuffle_ind
        self.order_by_degree = order_by_degree

        assert (self.order_by_degree == True and self.shuffle_ind == 0) or (
                    self.order_by_degree == False), f'order_by_degree={self.order_by_degree} and shuffle_ind={self.shuffle_ind}'

        self.self_attn = Mamba(
            d_model=channels,
            d_state=d_state,
            d_conv=d_conv,
            expand=1
        )

        self.mlp = nn.Sequential(
            nn.Linear(channels, channels * 2),
            activation_resolver(act, **(act_kwargs or {})),
            nn.Dropout(dropout),
            nn.Linear(channels * 2, channels),
            nn.Dropout(dropout),
        )

        norm_kwargs = norm_kwargs or {}
        self.norm1 = normalization_resolver(norm, channels, **norm_kwargs)
        self.norm2 = normalization_resolver(norm, channels, **norm_kwargs)
        self.norm3 = normalization_resolver(norm, channels, **norm_kwargs)

        self.norm_with_batch = False

    def reset_parameters(self):
        r"""Resets all learnable parameters of the module."""
        if self.conv is not None:
            self.conv.reset_parameters()
        self.attn._reset_parameters()
        reset(self.mlp)
        if self.norm1 is not None:
            self.norm1.reset_parameters()
        if self.norm2 is not None:
            self.norm2.reset_parameters()
        if self.norm3 is not None:
            self.norm3.reset_parameters()

    def forward(
            self,
            x: Tensor,
            edge_index: Adj,
            batch: Optional[torch.Tensor] = None,
            **kwargs,
    ) -> Tensor:
        r"""Runs the forward pass of the module."""
        hs = []
        if self.conv is not None:  # Local MPNN.
            h = self.conv(x, edge_index, **kwargs)
            h = F.dropout(h, p=self.dropout, training=self.training)
            h = h + x
            if self.norm1 is not None:
                if self.norm_with_batch:
                    h = self.norm1(h, batch=batch)
                else:
                    h = self.norm1(h)
            hs.append(h)

        if self.order_by_degree:
            deg = degree(edge_index[0], x.shape[0]).to(torch.long)
            order_tensor = torch.stack([batch, deg], 1).T
            _, x = sort_edge_index(order_tensor, edge_attr=x)

        if self.shuffle_ind == 0:
            h, mask = to_dense_batch(x, batch)
            h = self.self_attn(h)[mask]
        else:
            mamba_arr = []
            for _ in range(self.shuffle_ind):
                h_ind_perm = permute_within_batch(x, batch)
                h_i, mask = to_dense_batch(x[h_ind_perm], batch)
                h_i = self.self_attn(h_i)[mask][h_ind_perm]
                mamba_arr.append(h_i)
            h = sum(mamba_arr) / self.shuffle_ind
        ###

        h = F.dropout(h, p=self.dropout, training=self.training)
        h = h + x  # Residual connection.
        if self.norm2 is not None:
            h = self.norm2(h)
        hs.append(h)

        out = sum(hs)  # Combine local and global outputs.

        out = out + self.mlp(out)
        if self.norm3 is not None:
            out = self.norm3(out)

        return out

    def __repr__(self) -> str:
        return (f'{self.__class__.__name__}({self.channels}, '
                f'conv={self.conv})')


class GraphModel(nn.Module):
    def __init__(self, dim_in, dim_out, A, pe_dim, d_state,
                 d_conv, order_by_degree,  layer, num_point, attn_drop, pe, neighbor, shuffle_ind, **kwargs):
        super().__init__()
        self.layer = layer
        self.node_emb = nn.Embedding(dim_in, dim_out, dtype=float)
        self.edge_emb = nn.Embedding(num_point*2, dim_out)
        self.order_by_degree = order_by_degree
        self.shuffle_ind = shuffle_ind
        self.neighbor = neighbor

        nnF = nn.Sequential(
            nn.Linear(dim_out, dim_out),
            nn.ReLU(),
            nn.Linear(dim_out, dim_out),
        )
        self.conv = GPSConv(dim_in, GINEConv(nnF), attn_dropout=attn_drop,
                       shuffle_ind=self.shuffle_ind,
                       order_by_degree=self.order_by_degree,
                       d_state=d_state, d_conv=d_conv)



    def forward(self, x):
        def convert_neighbor_to_edge_index(neighbor):
            indices = torch.zeros((2, 50), dtype=int, device=x.device)
            # print(indices)
            i = 0
            for pair in neighbor:
                indices[0][i] = pair[0]
                indices[1][i] = pair[1]
                i += 1
            return indices
        edge_index = convert_neighbor_to_edge_index(self.neighbor)
        edge_attr = torch.ones(edge_index.size(1), dtype=torch.int, device=x.device)
        edge_attr = self.edge_emb(edge_attr)
        if self.layer == 1:
            x = self.node_emb(x.squeeze(-1))
            x = self.conv(x, edge_index, edge_attr=edge_attr)
        else:
            x = self.conv(x, edge_index, edge_attr=edge_attr)
        return x



class unit_vit(nn.Module):
    def __init__(self, dim_in, dim, A, num_of_heads, neighbor, add_skip_connection=True, qkv_bias=False, qk_scale=None, drop=0.,
                 attn_drop=0.,
                 drop_path=0, act_layer=nn.GELU, norm_layer=nn.LayerNorm, layer=0,
                 insert_cls_layer=0, pe=False, num_point=25, **kwargs):
        super().__init__()
        self.norm1 = norm_layer(dim_in)
        self.dim_in = dim_in
        self.dim = dim
        self.add_skip_connection = add_skip_connection
        self.num_point = num_point
        # attention part - HyperSA
        self.attn = GraphModel(dim_in=dim_in, dim_out=dim, A=A, attn_drop=attn_drop,
                         pe=pe, num_point=num_point, layer=layer, neighbor=neighbor, pe_dim=1,
                               d_state=16, d_conv=4, order_by_degree=False, shuffle_ind=0, **kwargs)
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        if self.dim_in != self.dim:
            self.skip_proj = nn.Conv2d(dim_in, dim, (1, 1), padding=(0, 0), bias=False)
        self.pe_proj = nn.Conv2d(dim_in, dim, 1, bias=False)
        self.pe = pe

    def forward(self, x):
        """
                    N * M - number of video sequences with person number
                    C - number of channels (3d position of points)
                    T - number of frames
                    V - number of skeleton points (25)
                    after permute(0,2,3,1)
                    (N*M, T, V, C)
                    after permute(0,3,1,2)
                    (N*M, C, T, V)

                    normalize hypersa values, drop unused attention, acquire hyperedge relation
                    """
        x = self.drop_path(self.attn(self.norm1(x.permute(0, 2, 3, 1)).permute(0, 3, 1, 2)))
        return x


"""
Attention module + Temporal module 

in_channels - 3 for first layer, then 24*number of heads
out_channels - 24*number of heads
"""


class TCN_ViT_unit(nn.Module):
    def __init__(self, in_channels, out_channels, A, neighbor, stride=1, num_of_heads=6, residual=True, kernel_size=5,
                 dilations=[1, 2], pe=False, num_point=25, layer=0):
        super(TCN_ViT_unit, self).__init__()
        # attention and spatial part
        self.vit1 = unit_vit(in_channels, out_channels, A, add_skip_connection=residual, num_of_heads=num_of_heads,
                             pe=pe, num_point=num_point, layer=layer, neighbor=neighbor)
        # self.tcn1 = unit_tcn(out_channels, out_channels, stride=stride)
        # temporal part
        self.tcn1 = MultiScale_TemporalConv(out_channels, out_channels, kernel_size=kernel_size, stride=stride,
                                            dilations=dilations,
                                            # redisual=True has worse performance in the end
                                            residual=False)
        self.act = nn.ReLU(inplace=True)
        self.in_channels = in_channels
        self.out_channels = out_channels
        self.stride = stride

        if not residual:
            self.residual = lambda x: 0

        elif (in_channels == out_channels) and (stride == 1):
            self.residual = lambda x: x

        else:
            self.residual = unit_tcn(in_channels, out_channels, kernel_size=1, stride=stride)

    def forward(self, x):
        y = self.act(self.tcn1(self.vit1(x)) + self.residual(x))
        return y


"""
    N: Number of video sequences (the first dimension).
    C: Number of channels (which corresponds to the 3D coordinates: x, y, z). In your case, this is 3.
    V: Number of skeleton points (which corresponds to the 25 skeleton points per person).
    T: Number of frames (the second dimension).
    M: Number of persons (which is 2 in your case).
"""


class ModelGraph(nn.Module):
    def __init__(self, num_class=60, num_point=20, num_person=2, graph=None, graph_args=dict(), in_channels=3,
                 drop_out=0, num_of_heads=9, joint_label=[], **kwargs):
        super(ModelGraph, self).__init__()

        if graph is None:
            raise ValueError()
        else:
            Graph = import_class(graph)
            self.graph = Graph(**graph_args)

        A = self.graph.A  # 3,25,25
        neighbor = self.graph.neighbor

        self.num_of_heads = num_of_heads
        self.num_class = num_class
        self.num_point = num_point
        self.num_person = num_person
        self.data_bn = nn.BatchNorm1d(num_person * in_channels * num_point)
        self.joint_label = joint_label

        self.l1 = TCN_ViT_unit(3, 24 * num_of_heads, A, residual=True, num_of_heads=num_of_heads, pe=True,
                               num_point=num_point, layer=1, neighbor=neighbor)
        # * num_heads, effect of concatenation following the official implementation
        self.l2 = TCN_ViT_unit(24 * num_of_heads, 24 * num_of_heads, A, residual=True, num_of_heads=num_of_heads,
                               pe=True, num_point=num_point, layer=2, neighbor=neighbor)
        self.l3 = TCN_ViT_unit(24 * num_of_heads, 24 * num_of_heads, A, residual=True, num_of_heads=num_of_heads,
                               pe=True, num_point=num_point, layer=3, neighbor=neighbor)
        self.l4 = TCN_ViT_unit(24 * num_of_heads, 24 * num_of_heads, A, residual=True, num_of_heads=num_of_heads,
                               pe=True, num_point=num_point, layer=4, neighbor=neighbor)
        self.l5 = TCN_ViT_unit(24 * num_of_heads, 24 * num_of_heads, A, residual=True, stride=2,
                               num_of_heads=num_of_heads, pe=True, num_point=num_point, layer=5, neighbor=neighbor)
        self.l6 = TCN_ViT_unit(24 * num_of_heads, 24 * num_of_heads, A, residual=True, num_of_heads=num_of_heads,
                               pe=True, num_point=num_point, layer=6,neighbor=neighbor )
        self.l7 = TCN_ViT_unit(24 * num_of_heads, 24 * num_of_heads, A, residual=True, num_of_heads=num_of_heads,
                               pe=True, num_point=num_point, layer=7, neighbor=neighbor)
        # self.l8 = TCN_ViT_unit(24 * num_of_heads, 24 * num_of_heads, A, num_of_heads=num_of_heads)
        self.l8 = TCN_ViT_unit(24 * num_of_heads, 24 * num_of_heads, A, residual=True, stride=2,
                               num_of_heads=num_of_heads, pe=True, num_point=num_point, layer=8, neighbor=neighbor)
        self.l9 = TCN_ViT_unit(24 * num_of_heads, 24 * num_of_heads, A, residual=True, num_of_heads=num_of_heads,
                               pe=True, num_point=num_point, layer=9, neighbor=neighbor)
        self.l10 = TCN_ViT_unit(24 * num_of_heads, 24 * num_of_heads, A, residual=True, num_of_heads=num_of_heads,
                                pe=True, num_point=num_point, layer=10, neighbor=neighbor)
        # standard ce loss
        self.fc = nn.Linear(24 * num_of_heads, num_class)

        # ## larger model
        # self.l1 = TCN_ViT_unit(3, 36 * num_of_heads, A, residual=True, num_of_heads=num_of_heads, pe=True,
        #                        num_point=num_point, layer=1)
        # # * num_heads, effect of concatenation following the official implementation
        # self.l2 = TCN_ViT_unit(36 * num_of_heads, 36 * num_of_heads, A, residual=True, num_of_heads=num_of_heads,
        #                        pe=True, num_point=num_point, layer=2)
        # self.l3 = TCN_ViT_unit(36 * num_of_heads, 36 * num_of_heads, A, residual=True, num_of_heads=num_of_heads,
        #                        pe=True, num_point=num_point, layer=3)
        # self.l4 = TCN_ViT_unit(36 * num_of_heads, 36 * num_of_heads, A, residual=True, num_of_heads=num_of_heads,
        #                        pe=True, num_point=num_point, layer=4)
        # self.l5 = TCN_ViT_unit(36 * num_of_heads, 36 * num_of_heads, A, residual=True, stride=2,
        #                        num_of_heads=num_of_heads, pe=True, num_point=num_point, layer=5)
        # self.l6 = TCN_ViT_unit(36 * num_of_heads, 36 * num_of_heads, A, residual=True, num_of_heads=num_of_heads,
        #                        pe=True, num_point=num_point, layer=6)
        # self.l7 = TCN_ViT_unit(36 * num_of_heads, 36 * num_of_heads, A, residual=True, num_of_heads=num_of_heads,
        #                        pe=True, num_point=num_point, layer=7)
        # # self.l8 = TCN_ViT_unit(36 * num_of_heads, 36 * num_of_heads, A, num_of_heads=num_of_heads)
        # self.l8 = TCN_ViT_unit(36 * num_of_heads, 36 * num_of_heads, A, residual=True, stride=2,
        #                        num_of_heads=num_of_heads, pe=True, num_point=num_point, layer=8)
        # self.l9 = TCN_ViT_unit(36 * num_of_heads, 36 * num_of_heads, A, residual=True, num_of_heads=num_of_heads,
        #                        pe=True, num_point=num_point, layer=9)
        # self.l10 = TCN_ViT_unit(36 * num_of_heads, 36 * num_of_heads, A, residual=True, num_of_heads=num_of_heads,
        #                         pe=True, num_point=num_point, layer=10)
        # # standard ce loss
        # self.fc = nn.Linear(36 * num_of_heads, num_class)

        nn.init.normal_(self.fc.weight, 0, math.sqrt(2. / num_class))
        bn_init(self.data_bn, 1)
        if drop_out:
            self.drop_out = nn.Dropout(drop_out)
        else:
            self.drop_out = lambda x: x

    # x = data, y - labels

    def forward(self, x, y):

        """
            N: Number of video sequences (the first dimension).
            C: Number of channels (which corresponds to the 3D coordinates: x, y, z). In your case, this is 3.
            V: Number of skeleton points (which corresponds to the 25 skeleton points per person).
            T: Number of frames (max 300).
            M: Number of persons (which is 2 in your case).
        """

        N, C, T, V, M = x.size()
        """
        N: Number of video sequences.
        M * V * C: Combined dimension for persons, skeleton points, and channels.
        T: Number of frames.
        """
        x = x.permute(0, 4, 3, 1, 2).contiguous().view(N, M * V * C, T)
        # batch normalization
        x = self.data_bn(x)

        # return to the original structure after batch normalization
        # contiguos is meant to ensure that tensor is stored in contigious block of information
        ## n, c, t, v
        """
        The view(N * M, V, C, T) reshapes x to (N * M, V, C, T), 
        effectively flattening the first two dimensions (number of sequences and number of persons) into a single dimension. 
        This is useful for processing each person in each sequence independently.
        Finally, the permute(0, 2, 3, 1) rearranges the dimensions again:

        after permute(0,2,3,1) is arrangement of values - 0th value, then 2nd value etc
        so, the last arrangement is (N*M, C, T, V)
        N * M - number of video sequences with person number
        C - number of channels (3d position of points)
        T - number of frames
        V - number of skeleton points (25)
        """
        x = x.view(N, M, V, C, T).contiguous().view(N * M, V, C, T).permute(0, 2, 3, 1)

        x = self.l1(x)
        x = self.l2(x)
        x = self.l3(x)
        x = self.l4(x)
        x = self.l5(x)
        x = self.l6(x)
        x = self.l7(x)
        x = self.l8(x)
        x = self.l9(x)
        x = self.l10(x)

        # N*M, C, T, V
        _, C, T, V = x.size()
        # spatial temporal average pooling
        x = x.view(N, M, C, -1)
        x = x.mean(3).mean(1)
        x = self.drop_out(x)
        x = self.fc(x)
        return x, y
